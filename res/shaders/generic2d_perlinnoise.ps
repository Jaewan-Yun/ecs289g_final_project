#version 400

out vec4 LFragment;
in vec4 ex_Color;

layout(std140) uniform in_GlobalBuffer {
	vec4 ScreenSize;	// w, h, 1/w, 1/h
	float time;
	float seed;
};

// prelin noise credit to https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83
const float texture_width = 2048.0;

#define maxprime_index 10

vec3 primes[maxprime_index] = vec3[](
	vec3(995615039, 600173719, 701464987),
	vec3(831731269, 162318869, 136250887),
	vec3(174329291, 946737083, 245679977),
	vec3(362489573, 795918041, 350777237),
	vec3(457025711, 880830799, 909678923),
	vec3(787070341, 177340217, 593320781),
	vec3(405493717, 291031019, 391950901),
	vec3(458904767, 676625681, 424452397),
	vec3(531736441, 939683957, 810651871),
	vec3(997169939, 842027887, 423882827)
);

float rand(vec2 co){return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);}
float uniform_random(float x, float y) {
	return rand(vec2(floor(seed), fract(seed))) * (y - x) + y;
}

float Noise(int i, int x, int y) {
	int n = x + y * 57;
	n = (n << 13) ^ n;
	int a = int(primes[i].x);
	int b = int(primes[i].y);
	int c = int(primes[i].z);
	int t = (n * (n * n * a + b) + c) & 0x7fffffff;
	return 1.0 - t / 1073741824.0;
}

float SmoothedNoise(int i, int x, int y) {
	float corners = (Noise(i, x-1, y-1) + Noise(i, x+1, y-1) + Noise(i, x-1, y+1) + Noise(i, x+1, y+1)) / 16;
	float sides = (Noise(i, x-1, y) + Noise(i, x+1, y) + Noise(i, x, y-1) + Noise(i, x, y+1)) / 8;
	float center = Noise(i, x, y) / 4;
	return corners + sides + center;
}

float Interpolate(float a, float b, float x) {
	float ft = x * 3.1415927;
	float f = (1 - cos(ft)) * 0.5;
	return a*(1-f) + b*f;
}

float InterpolatedNoise(int i, float x, float y) {
	int integer_X = int(x);
	int integer_Y = int(y);
	float fractional_X = fract(x);
	float fractional_Y = fract(y);
	float v1 = SmoothedNoise(i, integer_X, integer_Y);
	float v2 = SmoothedNoise(i, integer_X + 1, integer_Y);
	float v3 = SmoothedNoise(i, integer_X, integer_Y + 1);
	float v4 = SmoothedNoise(i, integer_X + 1, integer_Y + 1);
	float i1 = Interpolate(v1, v2, fractional_X);
	float i2 = Interpolate(v3, v4, fractional_X);
	return Interpolate(i1, i2, fractional_Y);
}

float perlin_noise(float x, float y) {
	//int n_octaves = int(uniform_random(4, 6));  // More octaves generates bigger structures
	const int n_octaves = 5;
	float persistence = uniform_random(0.7, 1);  // Between 0 to 1
	int prime_index = int(uniform_random(0, 10));  // Between 0 to 9
	float offset_x = uniform_random(0, 100000);
	float offset_y = uniform_random(0, 100000);
	x += offset_x;
	y += offset_y;

	float total = 0;
	float frequency = pow(2.0, n_octaves);
	float amplitude = 1;
	for (int i = 0; i < n_octaves; ++i) {
		frequency /= 2;
		amplitude *= persistence;
		total += InterpolatedNoise((prime_index + i) % maxprime_index, x / frequency, y / frequency) * amplitude;
	}
	return total / frequency;
}

void main() {
	vec2 screenCoord = ex_Color.xy;
	vec2 block_num = floor(screenCoord * texture_width);
	vec2 block_offset = fract(screenCoord * texture_width);
	vec2 block_coord = block_num / texture_width;
	vec2 block_num_2 = block_num * 0.1f + 0.2323f;
	float z = clamp(perlin_noise(block_num_2.x, block_num_2.y), 0.0f, 5.0f);
	float f = (time * 2.5f +(block_num.x+block_num.y+1)/40);
	LFragment = vec4(40, 90 * z + 40, 30, 150 + 60 * sin(f)) / 255.0f;
	//LFragment = vec4(block_coord.xy, 0.0f, 1.0f);
	//LFragment = vec4(z, z, z, 1.0f);
}